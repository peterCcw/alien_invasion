import sys
from time import sleep

import pygame

from settings import Settings
from game_stats import GameStats
from scoreboard import Scoreboard
from button import Button
from ship import Ship
from bullet import Bullet
from alien import Alien
from alien_bullet import AlienBullet


class AlienInvasion:
    """Manages resources and the game"""

    def __init__(self):
        """Initialize the game and create it's resources"""
        pygame.init()
        self.settings = Settings()

        self.screen = pygame.display.set_mode(
            (self.settings.screen_width, self.settings.screen_height))
        # self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
        # self.settings.screen_width = self.screen.get_rect().width
        # self.settings.screen_width = self.screen.get_rect().height
        pygame.display.set_caption('Alien Invasion')

        # Creating objs of statistics and score board\
        self.stats = GameStats(self)
        self.sb = Scoreboard(self)

        self.ship = Ship(self)
        self.bullets = pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()
        self.alien_bullets = pygame.sprite.Group()

        self._create_fleet()

        # Creating start button
        self.play_button = Button(self, "Gra")

    def run_game(self):
        """Begin of main loop of game"""
        while True:
            self._check_events()

            if self.stats.game_active:
                self._fire_alien_bullet()
                self.ship.update()
                self._update_bullets()
                self._update_alien_bullets()
                self._update_aliens()

            self._update_screen()

    def _check_events(self):
        """React for events generated by the keyboard and the mouse"""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self._quit_game()
            elif event.type == pygame.KEYDOWN:
                self._check_keydown_events(event)
            elif event.type == pygame.KEYUP:
                self._check_keyup_events(event)
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                self._check_mouse_button_down_events(mouse_pos)

    def _check_keydown_events(self, event):
        """React on pressing the keyboard key"""
        if event.key == pygame.K_LEFT:
            self.ship.moving_left = True
        elif event.key == pygame.K_RIGHT:
            self.ship.moving_right = True
        elif event.key == pygame.K_q:
            self._quit_game()
        elif event.key == pygame.K_SPACE:
            self._fire_bullet()
        elif event.key == pygame.K_g:
            self._start_game()

    def _check_keyup_events(self, event):
        """React on realising the keyboard key"""
        if event.key == pygame.K_LEFT:
            self.ship.moving_left = False
        elif event.key == pygame.K_RIGHT:
            self.ship.moving_right = False

    def _check_mouse_button_down_events(self, mouse_pos):
        """Check every clickable area"""
        self._check_play_button(mouse_pos)

    def _check_play_button(self, mouse_pos):
        """Activate _start_game function after clicking on button"""
        button_clicked = self.play_button.rect.collidepoint(mouse_pos)
        if button_clicked and not self.stats.game_active:
            self._start_game()

    def _start_game(self):
        """Check if game is not active, if it is not, begin a new game"""
        if not self.stats.game_active:
            # Resetting stats
            self.settings.initialize_dynamic_settings()
            self.stats.reset_stats()
            self.stats.game_active = True
            self.sb.prep_images()

            # Deleting aliens and bullets
            self.aliens.empty()
            self.bullets.empty()

            # Creating new fleet and centering the ship
            self._create_fleet()
            self.ship.center_ship()
            # Hide mouse cursor
            pygame.mouse.set_visible(False)

    def _fire_bullet(self):
        """Create new bullet and add it to the bullet's group"""
        if len(self.bullets) < self.settings.bullets_allowed:
            new_bullet = Bullet(self)
            self.bullets.add(new_bullet)

    def _fire_alien_bullet(self):
        """Create new alien bullet and add it to the alien bullet's group"""
        if len(self.alien_bullets) < self.settings.alien_bullets_allowed:
            new_bullet = AlienBullet(self)
            self.alien_bullets.add(new_bullet)

    def _create_fleet(self):
        """Create full fleet of aliens"""
        # Creating an alien and counting number of alien in a row.
        # Distance between aliens is equal width of one alien
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        available_space_x = self.settings.screen_width - (2 * alien_width)
        number_aliens_x = available_space_x // (2 * alien_width)

        # Counting number of rows
        ship_height = self.ship.rect.height
        available_space_y = self.settings.screen_height - (3 * alien_height) \
                                                        - ship_height
        number_rows = available_space_y // (2 * alien_height)

        # Creating full fleet of aliens
        for row_number in range(number_rows):
            for alien_number in range(number_aliens_x):
                self._create_alien(alien_number, row_number)

    def _create_alien(self, alien_number, row_number):
        """Create alien and add it to a row"""
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        alien.x = alien_width + 2 * alien_width * alien_number
        alien.rect.x = alien.x
        alien.y = alien.rect.height + 2 * alien.rect.height * row_number
        alien.rect.y = alien.y
        self.aliens.add(alien)

    def _check_fleet_edges(self):
        """React when fleet reaches the edge of the screen"""
        for alien in self.aliens.sprites():
            if alien.check_edges():
                self._change_fleet_direction()
                break

    def _change_fleet_direction(self):
        """Move whole fleet downward and change its direction of movement"""
        for alien in self.aliens.sprites():
            alien.rect.y += self.settings.fleet_drop_speed
            alien.y = alien.rect.y
        self.settings.fleet_direction *= -1

    def _update_screen(self):
        """Update images on the screen"""
        self.screen.fill(self.settings.bg_color)
        self.ship.blitme()
        for bullet in self.bullets:
            bullet.draw_bullet()
        for alien_bullet in self.alien_bullets:
            alien_bullet.draw_bullet()
        self.aliens.draw(self.screen)

        # Displaying score board
        self.sb.show_score()

        # Displaying start button only if game is inactive
        if not self.stats.game_active:
            self.play_button.draw_button()

        # Displaying last modified screen
        pygame.display.flip()

    def _update_bullets(self):
        """Update the location of bullets and delete bullets over the upper
        edge of screen"""
        # Updating the location
        self.bullets.update()

        # Deleting bullets over the edge
        for bullet in self.bullets.copy():
            if bullet.rect.bottom <= 0:
                self.bullets.remove(bullet)

        self._check_bullet_alien_collisions()

    def _update_alien_bullets(self):
        """Update the location of alien bullets and delete bullets over the
        lower edge of screen
        """
        # Updating the location
        self.alien_bullets.update()

        # Deleting bullets over the edge
        for bullet in self.alien_bullets.copy():
            if bullet.rect.bottom >= self.settings.screen_height:
                self.alien_bullets.remove(bullet)

        self._check_bullet_player_collisions()

    def _check_bullet_alien_collisions(self):
        """React to collision of bullet and alien"""
        # Checking if any bullet hit the alien. If so, delete bullet and alien
        collisions = pygame.sprite.groupcollide(self.bullets, self.aliens,
                                                True, True)

        # Updating the score
        if collisions:
            for aliens in collisions.values():
                self.stats.score += self.settings.alien_points * len(aliens)
            self.sb.prep_score()
            self.sb.check_high_score()

        if not self.aliens:
            self._start_new_level()

    def _check_bullet_player_collisions(self):
        """React to collision of alien bullet and player's ship"""
        if pygame.sprite.spritecollideany(self.ship, self.alien_bullets):
            self._ship_hit()

    def _update_aliens(self):
        """Check if fleet reached the edge of the screen and update location
        of each alien
        """
        self._check_fleet_edges()
        self.aliens.update()

        # Checking collision between alien and the player's ship
        if pygame.sprite.spritecollideany(self.ship, self.aliens):
            self._ship_hit()

        # Checking if any alien reached bottom edge
        self._check_aliens_bottom()

    def _check_aliens_bottom(self):
        """Check if any alien reached the bottom edge of the screen"""
        screen_rect = self.screen.get_rect()
        for alien in self.aliens.sprites():
            if alien.rect.bottom >= screen_rect.bottom:
                # Same action as collision ship - alien
                self._ship_hit()
                break

    def _ship_hit(self):
        """Reacts to hit of ship"""
        if self.stats.ships_left > 0:
            self.stats.ships_left -= 1
            self.sb.prep_ships()

            self.aliens.empty()
            self.bullets.empty()
            self.alien_bullets.empty()

            self._create_fleet()
            self.ship.center_ship()

            sleep(0.5)
        else:
            self.stats.game_active = False
            pygame.mouse.set_visible(True)

    def _start_new_level(self):
        """Load new level"""
        # Deleting existing bullets and creating new fleet of aliens
        self.bullets.empty()
        self.alien_bullets.empty()
        self._create_fleet()
        self.settings.increase_speed()

        # Incrementation of the level number
        self.stats.level += 1
        self.sb.prep_level()

    def _quit_game(self):
        """Save best score and quit game"""
        with open('best_score_txt', 'w') as file_object:
            file_object.write(str(self.stats.high_score))
        sys.exit()


if __name__ == '__main__':
    # Creating instance of game and running it
    ai = AlienInvasion()
    ai.run_game()
